=== Роли и права ===
=== Многие к многим(ManyToMany) ===

https://laravel.com/docs/8.x/eloquent-relationships#many-to-many
Для начала что б это работало нужно 3 таблицы. На примере Ролей и прав , мы создадим таблицу users , roles , role_user ( имя для таблицы которая их связавыает определяеться по алфавиту, как буква идет первей то имя таблицы ставиться первым в единичном формате  )
users
    id - integer
    name - string

roles
    id - integer
    name - string

role_user
    user_id - integer
    role_id - integer

У user может быть много role  и у каждой роли может быть много юзеров , наприме. Роль менджер может быть у 3 человек . А у юзера может быть сразу несколько ролей , админ, менеджер и тд.

Окей, сначала конечно же нужно создать модель и имиграционный файл:
Сначала для Роли:
php artisan make:model Role -m
Потом для Прав:
php artisan make:model Permission -m
Сами таблички по себе маленькие, в них достаточно в миграционном файле поместить name,slug и оставить id , timestamp

Получаеться такая вспомогательная табличка (pru)
1. Пользователь имеет Права  - permission_user
2. Пользователь имеет Роли - role_user
3. Роли имеею Права - permission_role
Вот такие 3 таблицы еще надо создать дополнительно.
Модели нам не надо для такиз так что сразу создаем миграции
На парах преподовательно обяснла что таблицы нужно создавать в множественном числе, в документации пишут что надо в единствином(я так и сделал )
В этих таблицах связи нужно указывать id таблицх что мы связываем ну и конечно же Сами СВЯЗИ:
            $table->unsignedBigInteger('permission_id');
            $table->unsignedBigInteger('role_id');

            $table->foreing('permission_id')->references('id')->on('permissions')->onDelete('cascade');  - В конце надо указать так. Для того что б мы могли удалить например какие то права, но если они будут привязаны к пользователю мы этого сделать не сможет.
            $table->foreing('role_id')->references('id')->on('roles')->onDelete('cascade');

И так для всех таблиц и потом выполянем миграцию.
У меня случилась беда, я прописал  php artisan make:rollback и у меня удалилсь все таблицы в БД и когда я хотел опять их мигрировать, была ошибка что б ее исправить надо зайтив appserviceprovider и там закаментировать все что мешает

Теперь нам надо в модельях прописать все Отношение
Сначала связываем Роли и права:
В Модели Role Создаем метод в множествином числе permissions, метод связи должен возвращать этот класс -> belongsToMany(он автоматом связывает таблицы в 3 таблице) Модель с которой связываемся и 3я таблица (но если мы сделали все правильно в едеинствином числе и по алфовиту тогда можно не указывать)
    public function permissions()
    {
        return $this->belongsToMany(Permission::class, 'permission_role');
    }
Так же в зеркальном порядке делаем в Модели Permission

=== Трейты / Traits ===

Трейты как и классы создаються в отдельной папке и файлах в папке app
Создавая какой то трейт в него мы может поместить любые свойства и методы и использовать их в любых классах прописывая use внутри класса, указывать их можно через запятую.
Создавая трейт не забыть сверху прописать namespace
Трейт мы создали для того чтоб подключить его в Модель User, а нем указать две связи юзер к правам и юзер к ролям.

Создаем метод для проверки на роль пользователя в трейте
public function hasRole($role) - в параменты помещаем переменную
{
    return $this->roles()->contains('slug',$role)             - метод roles() возвращает нам колекцию ролей(если там не одна, но если даже одна все равно колекция) , метод contains() ищет  в этой колекции то что нам надо, а надо нам slug роли , указываем мы его первым параметром, втрорым то что проверяем (название в виде слага роли которую нам надо обнаружить) и все это дело возварщает true or false
}
Так же делаем для permission

После этого нужно заполнить таблицу ручками роли, права, пользователя если надо, и сделать связи в промежуточных таблицах , пользователям дать роли , ролям дать права

=== Middleware ===
https://laravel.com/docs/8.x/middleware#introduction

Когда все раздали и подключили нам нужно создать свой middleware через композер
php artisan make:middleware RoleMiddleware
Когда мы вызываем где то его, выполняеться метод handle()
В нем идет цепочная проверка ,
После того как мы написали свой мидл его нужно зарегестрировать в файле Kernal.php
И тут в массиве свойства routeMiddle добовляем новое имя с подключением новго мидла
После того как мы регнули новое имя мидла теперь можем его добавить к группе в роуте web.php для проведенние проверки Route::middleware(['auth', 'role']) - Далие очень интресный способ есть проверки на конкретную роль если укажем role:admin  то строка admin попадать в параметры метода handle в мидле и мы должны ее там указать как переменная ($role)  и подставить ее уже в нашу проверку на роль пользователя
    public function handle(Request $request, Closure $next, $role)
    {
        if( !Auth::user()->hasRole($role) ){
            return redirect('/');

            Вместо редиректа можно указать
            abort(404);
        }
        return $next($request);
    }
=== Создаем свою дерективу ===
Для проверки на Роль пользователя создам специальную дерективку для удобной проверки в blade файлах,тоесть мы будет разширять функционал blade а сделать мы это может в appserviceprovider метод boot() НО!! appserviceprovider загружаеться каждый раз когда мы загружаем страницу приложения. И может такое быть что мы много чего захотим запихнуть в этот appserviceprovider, поэтому мы может создать свой под любые задачи и не захломлять дефолтный.
https://laravel.com/docs/8.x/blade#extending-blade
Используем команду для создания нового провайдера:
php artisan make:provider  BladeServiceProvider
в методе boot пишем наши новые директивы
Вот так они выглядт:
        Blade::directive('role', function ($role) {
            return "<?php if(Auth::check() && Auth::user()->hasRole($role)): ?>";
        });
        Blade::directive('endrole', function ($role) {
            return "<?php endif ?>";
        });
И дальше нам надо добавить в confing > app   и там в ключе providers => добовляем наш новый провайдер.
После того как мы сделали модификацыю блейда нужно выполнить команду:
php artisan view:clear

@role('admin') - и если админ то выводи что то
    и
@endrole

=== Работа с правами ===
Тут схожа работа с Ролями тоже будет создавать свой провайдер и использовать Gate
https://laravel.com/docs/8.x/authorization#gates

use Illuminate\Support\Facades\Gate;  - подключать сверху имеено такой gate


=== Работа с Корзиной ===
Дополянем наш роуте , там был  - Route::get('/product/{slug}' ,[StoreController::class ,'product']); , нам надо добавить привязку к модели, перед слагом прописать название Модели
Route::get('/product/{product:slug}' ,[StoreController::class ,'product']);
А дальше надо поменять запись в методе в конетроллере , раньше метод product принимал как параметр $slug брал ее из URL, теперь нам надо прописать product(Product $product) - имя Модели и  в переменной будет лежать уже конктреный обьект товара на который мы перешли , его слаг будет браться автоматически как из обьекта, так как мы его указали в роуте.
И теперь нам не надо делать

Создаем на стрнице товара форму которая будет отправлять количество покупак товара и сам товар, в скрытом инпуте отправляем какой id товара который ложим в корзину
Дальше у нас есть нексколько вариант как и куда отправлять данные из формы:

- session - если пользователь не залогинен то хоробы хранить в сессии у пользователя на компе:
Сессия это асс массив мы будет рабоать именно с ним
- DB - если пользователь вошел тогда записываем в базу связывая с его id

- cookie - не подходит так как они получаються в каждом запросе

Дальше стал вопрос как мы будет данные отравлять обычной формой или Ajax запросом что без перезагрузки страницы

=== Ajax ===
Форме задаем класс
{!! Form::open(['class' => 'form-add-to-cart']) !!}
Для проверить в главном шаблоне на налачие в хеде метатега
<meta name="csrf-token" content="{{ csrf_token() }}">
Проверяем подключение файла с js скриптами в низу шаблона

И дальше уже создаем в папке js новый файл cart.js  и require его в основной файл app.js и запускаем npm run watch
О боги, этот js я его тупо не знаю, разпишу тут все по шагово

Создали конст с этой формой
const formAddToCart  = document.querySelector('.form-add-to-cart')
Далие проверяем ее
if(formAddToCart){
    formAddToCart.addEventListener('submit', (e)=> {     - добавили обработчик события submit , стрелочная функция в нее передали е - событие так как это обьект
        e.preventDefault(); - тут уже отменили стандртное дейтсвие (тоесть когда мы нажимаем на кнопку buy страница перестала обновляться )
        const data = new FormData(formAddToCart); - тут создаем переменную data = новому обекту формДата к оторый мы передаем нашу форму и втроенная в js команада FormData собирает нам обьект из наших переданных в форме данных
        прим.
        product_id: 1
        qty : 2
        И дальше ее передает в axios и так как мы ее передаем постом То и в метода Контроллера нужно их получить в помощью класса Request $request и можеь вывести id покупаемного товара  return $request->product_id; и посмотреть все там же где и 123 (описанно ниже)
        axios.post('/cart/add',data); - тут мы прописываем что форму будем отправлять посмтом по такой то сылки
    })
}
Нам надо создать контроллер корзины
Дальше идем в роутс и нам надо прописать пути:
Route::post('/cart/add' ,[CartController::class ,'add']);
Внутри нового конетроллера создали новый метод add - для теста прописали там return 123
Дальше нажимаем на кнопку buy - заходим в консоль разработчика в вкладку network там выбираем отсортировать XHR и там будет нащ запрос add переходим в него и там есть вкладка preview и смотрим там будет отработан наш метод add а тоесть цыфры 123
